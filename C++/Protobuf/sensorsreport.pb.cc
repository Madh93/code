// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorsreport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensorsreport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SensorsReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorsReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorsReport_SensorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorsReport_SensorStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SensorsReport_SensorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensorsreport_2eproto() {
  protobuf_AddDesc_sensorsreport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensorsreport.proto");
  GOOGLE_CHECK(file != NULL);
  SensorsReport_descriptor_ = file->message_type(0);
  static const int SensorsReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport, sensors_),
  };
  SensorsReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorsReport_descriptor_,
      SensorsReport::default_instance_,
      SensorsReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorsReport));
  SensorsReport_SensorStatus_descriptor_ = SensorsReport_descriptor_->nested_type(0);
  static const int SensorsReport_SensorStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport_SensorStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport_SensorStatus, value_),
  };
  SensorsReport_SensorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorsReport_SensorStatus_descriptor_,
      SensorsReport_SensorStatus::default_instance_,
      SensorsReport_SensorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport_SensorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorsReport_SensorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorsReport_SensorStatus));
  SensorsReport_SensorType_descriptor_ = SensorsReport_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensorsreport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorsReport_descriptor_, &SensorsReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorsReport_SensorStatus_descriptor_, &SensorsReport_SensorStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensorsreport_2eproto() {
  delete SensorsReport::default_instance_;
  delete SensorsReport_reflection_;
  delete SensorsReport_SensorStatus::default_instance_;
  delete SensorsReport_SensorStatus_reflection_;
}

void protobuf_AddDesc_sensorsreport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sensorsreport.proto\"\365\001\n\rSensorsReport\022"
    "\022\n\ndeviceName\030\001 \002(\t\022\021\n\ttimestamp\030\002 \002(\004\022,"
    "\n\007sensors\030\003 \003(\0132\033.SensorsReport.SensorSt"
    "atus\032F\n\014SensorStatus\022\'\n\004type\030\001 \002(\0162\031.Sen"
    "sorsReport.SensorType\022\r\n\005value\030\002 \002(\005\"G\n\n"
    "SensorType\022\014\n\010HUMIDITY\020\000\022\016\n\nLUMINOSITY\020\001"
    "\022\n\n\006MOTION\020\002\022\017\n\013TEMPERATURE\020\003", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensorsreport.proto", &protobuf_RegisterTypes);
  SensorsReport::default_instance_ = new SensorsReport();
  SensorsReport_SensorStatus::default_instance_ = new SensorsReport_SensorStatus();
  SensorsReport::default_instance_->InitAsDefaultInstance();
  SensorsReport_SensorStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensorsreport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensorsreport_2eproto {
  StaticDescriptorInitializer_sensorsreport_2eproto() {
    protobuf_AddDesc_sensorsreport_2eproto();
  }
} static_descriptor_initializer_sensorsreport_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SensorsReport_SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorsReport_SensorType_descriptor_;
}
bool SensorsReport_SensorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SensorsReport_SensorType SensorsReport::HUMIDITY;
const SensorsReport_SensorType SensorsReport::LUMINOSITY;
const SensorsReport_SensorType SensorsReport::MOTION;
const SensorsReport_SensorType SensorsReport::TEMPERATURE;
const SensorsReport_SensorType SensorsReport::SensorType_MIN;
const SensorsReport_SensorType SensorsReport::SensorType_MAX;
const int SensorsReport::SensorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SensorsReport_SensorStatus::kTypeFieldNumber;
const int SensorsReport_SensorStatus::kValueFieldNumber;
#endif  // !_MSC_VER

SensorsReport_SensorStatus::SensorsReport_SensorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorsReport_SensorStatus::InitAsDefaultInstance() {
}

SensorsReport_SensorStatus::SensorsReport_SensorStatus(const SensorsReport_SensorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorsReport_SensorStatus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorsReport_SensorStatus::~SensorsReport_SensorStatus() {
  SharedDtor();
}

void SensorsReport_SensorStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorsReport_SensorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorsReport_SensorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorsReport_SensorStatus_descriptor_;
}

const SensorsReport_SensorStatus& SensorsReport_SensorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensorsreport_2eproto();
  return *default_instance_;
}

SensorsReport_SensorStatus* SensorsReport_SensorStatus::default_instance_ = NULL;

SensorsReport_SensorStatus* SensorsReport_SensorStatus::New() const {
  return new SensorsReport_SensorStatus;
}

void SensorsReport_SensorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorsReport_SensorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SensorsReport.SensorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorsReport_SensorType_IsValid(value)) {
            set_type(static_cast< ::SensorsReport_SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorsReport_SensorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SensorsReport.SensorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorsReport_SensorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SensorsReport.SensorType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorsReport_SensorStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SensorsReport.SensorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorsReport_SensorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorsReport_SensorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorsReport_SensorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorsReport_SensorStatus::MergeFrom(const SensorsReport_SensorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorsReport_SensorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorsReport_SensorStatus::CopyFrom(const SensorsReport_SensorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorsReport_SensorStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SensorsReport_SensorStatus::Swap(SensorsReport_SensorStatus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorsReport_SensorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorsReport_SensorStatus_descriptor_;
  metadata.reflection = SensorsReport_SensorStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SensorsReport::kDeviceNameFieldNumber;
const int SensorsReport::kTimestampFieldNumber;
const int SensorsReport::kSensorsFieldNumber;
#endif  // !_MSC_VER

SensorsReport::SensorsReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorsReport::InitAsDefaultInstance() {
}

SensorsReport::SensorsReport(const SensorsReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorsReport::SharedCtor() {
  _cached_size_ = 0;
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorsReport::~SensorsReport() {
  SharedDtor();
}

void SensorsReport::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (this != default_instance_) {
  }
}

void SensorsReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorsReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorsReport_descriptor_;
}

const SensorsReport& SensorsReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensorsreport_2eproto();
  return *default_instance_;
}

SensorsReport* SensorsReport::default_instance_ = NULL;

SensorsReport* SensorsReport::New() const {
  return new SensorsReport;
}

void SensorsReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  sensors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorsReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string deviceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sensors;
        break;
      }

      // repeated .SensorsReport.SensorStatus sensors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sensors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorsReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string deviceName = 1;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->devicename(), output);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // repeated .SensorsReport.SensorStatus sensors = 3;
  for (int i = 0; i < this->sensors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sensors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorsReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string deviceName = 1;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .SensorsReport.SensorStatus sensors = 3;
  for (int i = 0; i < this->sensors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sensors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorsReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string deviceName = 1;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // required uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  // repeated .SensorsReport.SensorStatus sensors = 3;
  total_size += 1 * this->sensors_size();
  for (int i = 0; i < this->sensors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorsReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorsReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorsReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorsReport::MergeFrom(const SensorsReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensors_.MergeFrom(from.sensors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorsReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorsReport::CopyFrom(const SensorsReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorsReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < sensors_size(); i++) {
    if (!this->sensors(i).IsInitialized()) return false;
  }
  return true;
}

void SensorsReport::Swap(SensorsReport* other) {
  if (other != this) {
    std::swap(devicename_, other->devicename_);
    std::swap(timestamp_, other->timestamp_);
    sensors_.Swap(&other->sensors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorsReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorsReport_descriptor_;
  metadata.reflection = SensorsReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
